/* eslint-disable */

const fs = require("fs");
const path = require("path");
const root = __dirname;

const readDefinitions = function () {
  return new Promise((res, rej) => {
    fs.readdir(root, (err, files) => {
      if (err) {
        rej(err);
        return;
      }
      const filellist = [];
      files.forEach((file) => {
        if (/.*\.d\.ts$/.test(file) && !/index\.d\.ts/.test(file)) {
          filellist.push(file);
        }
      });
      res(filellist);
    });
  });
};

const createDefinitionIndex = function (fileList) {
  return new Promise((res) => {
    const definitionRows = fileList.map((file) => `/// <reference path="${file}" />`);
    const head = `
/*
##############################################################
# This file is automatically generated.                      #
# Any change is temporary and will be overwritten eventually #
##############################################################
*/

`;
    res(`${head}  ${definitionRows.join("\n  ")}`);
  });
};

const writeDefinitionIndex = function (definitionIndexContent) {
  return new Promise((res, rej) => {
    fs.writeFile("index.d.ts", definitionIndexContent, (err) => {
      if (err) {
        rej(err);
        return;
      }
      res("All written successfully");
    });
  });
};

readDefinitions()
  .then(createDefinitionIndex)
  .then(writeDefinitionIndex)
  .then(console.log)
  .catch(console.error);
